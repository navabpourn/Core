@model BExIS.Modules.Vim.UI.Models.DQModels

@using BExIS.Modules.Vim.UI.Controllers;
@using Telerik.Web.Mvc.UI;
@using BExIS.Modules.Vim.UI;


@{
    ViewBag.Title = "Data Quality";
}

@section Information
{
}

@{
    int minDescriptionLength = Model.datasetDescriptionLength.minDescriptionLength;
    int descriptionLength = Model.datasetDescriptionLength.currentDescriptionLength;
    int maxDescriptionLength = Model.datasetDescriptionLength.maxDescriptionLength;
    double medianDescriptionLength = Model.datasetDescriptionLength.medianDescriptionLength;
    int minDataStrDescriptionLength = Model.dataStrDescriptionLength.minDescriptionLength;
    int currentDataStrDescriptionLength = Model.dataStrDescriptionLength.currentDescriptionLength;
    int maxDataStrDescriptionLength = Model.dataStrDescriptionLength.maxDescriptionLength;
    double medianDataStrDescriptionLength = Model.dataStrDescriptionLength.medianDescriptionLength;
    int minDataStrUsage = Model.dataStrUsage.minDataStrUsage;
    int currentDataStrUsage = Model.dataStrUsage.currentDataStrUsage;
    int maxDataStrUsage = Model.dataStrUsage.maxDataStrUsage;
    double medianDataStrUsage = Model.dataStrUsage.medianDataStrUsage;
    int minSizeTabular = Model.datasetTotalSize.minSizeTabular;
    int maxSizeTabular = Model.datasetTotalSize.maxSizeTabular;
    double medianSizeTabular = Model.datasetTotalSize.medianSizeTabular;
    int minColNumber = Model.datasetColNumber.minColNumber;
    int maxColNumber = Model.datasetColNumber.maxColNumber;
    double medianColNumber = Model.datasetColNumber.medianColNumber;
    int minRowNumber = Model.datasetRowNumber.minRowNumber;
    int maxRowNumber = Model.datasetRowNumber.maxRowNumber;
    double medianRowNumber = Model.datasetRowNumber.medianRowNumber;
    double minSizeFile = Model.datasetTotalSize.minSizeFile;
    double maxSizeFile = Model.datasetTotalSize.maxSizeFile;
    double medianSizeFile = Model.datasetTotalSize.medianSizeFile;
    int minFileNumber = Model.datasetFileNumber.minFileNumber;
    int maxFileNumber = Model.datasetFileNumber.maxFileNumber;
    double medianFileNumber = Model.datasetFileNumber.medianFileNumber;
    double currentTotalSize = Model.datasetTotalSize.currentTotalSize;
    var columnNumber = Model.columnNumber;
    var rowNumber = Model.rowNumber;
    var fileNumber = Model.fileNumber;
    var filesInformation = Model.filesInformation;
    string type = Model.type;
    var performers = Model.performers;
    string p_names = "";
    string p_ids = "";
    string p_rates = "";
    for (int i = 0; i < performers.Count; ++i)
    {
        p_names += performers[i].performerName + "/";
        p_rates += performers[i].performerRate.ToString() + "/";
        for (int j = 0; j < performers[i].DatasetIds.Count; ++j)
        {
            p_ids += performers[i].DatasetIds[j].ToString() + ",";
        }
        p_ids += "/";
    }
    int minPerformersActivity = Model.performersActivity.minActivity;
    int maxPerformersActivity = Model.performersActivity.maxActivity;
    double medianPerformersActivity = Model.performersActivity.medianActivity;
    string performerDatasets = "";
    string performerName = "";
    var varVariables = Model.varVariables;
    int metadataTotalCompletion = Model.metadataComplition.totalFields;
    int metadataRequiredCompletion = Model.metadataComplition.requiredFields;
    int metadataMinRate = Model.metadataComplition.minRate;
    int metadataMaxRate = Model.metadataComplition.maxRate;
    double metadaMedianRate = Model.metadataComplition.medianRate;
    var datasetsInformation = Model.datasetsInformation;
    int help;
}

@*<p id="text">Metadata complition @metadataTotalCompletion%</p>
    <p>
        <progress max="100" value="@metadataTotalCompletion">hhh</progress>
    </p>*@

<table id="generalInfo">
    <tr>
        <td>
            @* **************************************** *@
            @* ********** General Information ********* *@
            @* **************************************** *@
            <table id="left" class="left">
                <tr>
                    <td></td>
                    <td></td>
                    <td>
                        <b>Versus all</b> &nbsp;&nbsp; <b class="info" id="openLegend" title="Legend" onclick="openLegend()">&#128712; @*&#8505; &#9432;*@</b>
                        <!-- The Modal -->
                        <div id="myModal" class="modal">
                            <img class="modal-content" id="modal-content" src="~/Areas/VIM/Content/drawing5.png" alt="Legend" />
                            <span class="close" id="close" title="Close">&times;</span>
                        </div>
                    </td>
                    <td>
                        <div>
                            @if (datasetsInformation.Count > 0)
                            {
                                <!--Drop Down List to select a dataset-->
                                <select id="datasetSelector" onchange="dqDetail()" style="width:200px;">

                                    <option value="all" label="Select a dataset" selected></option>
                                    @foreach (var dataset in Model.datasetsInformation)
                                    {
                                        string ps = "";
                                        foreach (var p in dataset.performersRate)
                                        {
                                            ps += "," + p.ToString();
                                        }
                                        string ds = @dataset.type.ToString() + "," + @dataset.metadataComplition.ToString() + "," + @dataset.descriptionLength.ToString() + "," + @dataset.structureDescriptionLength.ToString() + ","
                                            + @dataset.structureUsage.ToString() + "," + @dataset.datasetSizeFile.ToString() + "," + @dataset.columnNumber.ToString() + "," + @dataset.rowNumber.ToString() + "," + @dataset.fileNumber.ToString() + @ps;

                                        <option value="@ds" label="@dataset.datasetId">@dataset.datasetId</option>

                                    }
                                </select>
                            }
                        </div>
                    </td>
                </tr>
                <tr>
                    @*** FILE FORMAT *****************************************@
                    <td>File format</td>
                    <td></td>
                    <td><h class="green"></h>@type</td>
                    <td id="DSFileFormat" />
                </tr>
                <tr>
                    @*** METADATA COMPLITION **********************************@
                    <td>Metadata complition</td>
                    <td>@metadataTotalCompletion% of all metadata fields.</td>
                    <td id="metadataTotalComplition" />
                    <td id="DSmetadataTotalComplition" />
                </tr>
                <tr>
                    @*** DATA COLUMNS/FILES **********************************@
                    <td>
                        @if (@type == "tabular")
                        {<h>Number of variables</h>}
                        @if (@type == "file")
                        {<h>Number of files</h>}
                    </td>
                    <td>
                        @if (@type == "tabular")
                        {<h class="green"> &#10004; @columnNumber</h><h> Variables</h>}
                        @if (@type == "file")
                        {<h class="green">&#10004; @filesInformation.Count</h><h> Files</h>}
                    </td>
                    <td id="datasetColNumns" />
                    <td id="DSdatasetColNumns"></td>
                </tr>
                <tr>
                    @*** DATA ROWS/FILES **********************************@
                    <td>
                        @if (@type == "tabular")
                        {<h>Number of rows</h>}
                        @if (@type == "file")
                        {<h>Size of files</h>}
                    </td>
                    <td>
                        @if (@type == "tabular")
                        {
                            if (@rowNumber > 1000)
                            {
                                <h class="green">Math.Round(@rowNumber / 1000) K</h><h> Rows</h>;
                            }
                            else if (@rowNumber > 0)
                            {
                                <h class="green">&#10004; @rowNumber</h><h> Rows</h>;
                            }
                            else if (@rowNumber == 0)
                            {
                                <h class="red">&#10008; 0</h><h></h>;
                            }
                            else
                            {
                                <h class="gray">No data!</h>;
                            }
                        }
                        @if (@type == "file")
                        {
                            if (@currentTotalSize > 1000)
                            {
                                <h class="green">&#10004; Math.Round(@currentTotalSize / 1000) K</h>

                            }
                            else if (@currentTotalSize > 0)
                            {
                                <h class="green">&#10004; @currentTotalSize</h>
                            }
                            else if (@currentTotalSize == 0)
                            {
                                <h class="red">&#10008; 0</h>
                            }
                            else
                            {
                                <h class="gray">No data!</h>
                            }
                        }
                    </td>
                    <td id="datasetRowNumns" />
                    <td id="DSdatasetRowNumns" />
                </tr>
                <tr>
                    @*** DATASET DESCRIPTION **********************************@
                    <td>Dataset description</td>
                    <td>
                        @if (@descriptionLength > 0)
                        {<h class="green">&#10004; @descriptionLength</h> <h> characters</h>}
                    else
                    { <h class="red">&#10008; No description!</h>}
                    </td>
                    <td id="descriptionRates" />
                    <td id="DSdescriptionRates" />
                </tr>
                <tr>
                    @*** DATA STRUCTURE DESCRIPTION **********************************@
                    <td>Data structure description</td>
                    <td>
                        @if (currentDataStrDescriptionLength > 0)
                        {<h class="green">&#10004; @currentDataStrDescriptionLength </h> <h>characters</h>}
                    else
                    {<h class="red">&#10008; No description!</h>}
                    </td>
                    <td id="strDescriptionRates" />
                    <td id="DSStrDescriptionRates" />
                </tr>
                <tr>
                    @*** DATA STRUCTURE USAGE **********************************@
                    <td>Shared data structure</td>
                    <td>
                        @if (currentDataStrUsage > 1)
                        {<h class="green">&#10004; @currentDataStrUsage </h> <h>times used in other datasets.</h>}
                    else
                    {<h class="red">&#10008; No description!</h>}
                    </td>
                    <td id="dataStrUsage" />
                    <td id="DSdataStrUsage" />
                </tr>

                @*** PERFORMERS **********************************@
                <tr id="performerRate">
                    <td><b> Contributor name </b></td>
                    <td><b>Contributes in datasets</b></td>
                    <td><b>@*Versus all*@</b></td>

                </tr>
                @*<tr id="performerRate"></tr>*@

            </table>
        </td>
    </tr>
</table>
<table>
    <tr>
        <td>
            @* ********************************************* *@
            @* ************* FILE DATA DETAILS ************* *@
            @* ********************************************* *@
            @if (@type == "file")
            {
                <table>
                    <tr>
                        <td><b>Type</b></td>
                        <td><b>File name</b></td>
                        @*<td><b>Description</b></td>*@
                        <td><b>Size</b></td>
                    </tr>
                    @for (int i = 0; i < filesInformation.Count; ++i)
                    {
                        <tr>
                            <td @*class="dataType"*@>@filesInformation[i].fileFormat</td>
                            <td>@filesInformation[i].fileName</td>
                            @*<td>@filesInformation[i].fileDescription</td>*@

                            @if (filesInformation[i].fileSize > 1000)
                            {
                                <td>Math.round(filesInformation[i].fileSize/1000)</td>
                            }
                            else if (@filesInformation[i].fileSize >= 0)
                            {
                                <td>@filesInformation[i].fileSize</td>
                            }
                            else
                            {
                                <td><h class="gray">No data!</h></td>
                            }
                        </tr>

                    }
                </table>
            }

            @* ********************************************* *@
            @* ************* Tabular DATA DETAILS ********** *@
            @* ********************************************* *@
            @if (@type == "tabular" && varVariables.Count > 0)
            {
                @*<p>THIS IS A TABULAR FORMAT DATASET!</p>
                    <p>Dataset size: @currentTotalSize cells</p>*@
                <table>
                    <tr>
                        <td><b>Type</b></td>
                        <td><b>Variable name</b></td>
                        <td><b>Description</b></td>
                        <td><b>Variable usage</b></td>
                        <td><b>Data complition</b></td>
                        <td><b>Data distribution</b></td>
                    </tr>
                    @for (int i = 0; i < varVariables.Count; ++i)
                    {
                        <tr>
                            <td class="dataType">
                                @if (@varVariables[i].varType == "String")
                                {<p>Abc</p>}
                                else if (@varVariables[i].varType == "DateTime")
                                {<p>01/01</p>}
                                else if (@varVariables[i].varType == "Boolean")
                                {<p>T|F</p>}
                                else
                                {<p>123</p>}
                            </td>
                            <td>@varVariables[i].varLabel</td>
                            <td>
                                @if (@varVariables[i].varDescription.Length > 0)
                                {<h class="green">&#10004; @varVariables[i].varDescription.Length</h>}
                            else
                            {<h class="red">&#10008; </h>}
                            </td>
                            <td>
                                @if (@varVariables[i].varUsage > 0)
                                {<h class="green">&#10004; @varVariables[i].varUsage</h>}
                            else
                            {<h class="red">&#10008; </h>}
                            </td>
                            <td>
                                <svg width="110"
                                     height="20">
                                    <rect x="0" y="2" width="@varVariables[i].missing" height="15" style="fill: #14bb1aff; opacity: 0.7;" />
                                    <text x="50" y="13" text-anchor="middle" style="font-size:small; fill:black;">@varVariables[i].missing%</text>
                                    Sorry, your browser does not support inline SVG.
                                </svg>
                            </td>
                            <td>
                                @if (rowNumber > 0)
                                {
                                    if (@varVariables[i].varType != "String" && @varVariables[i].varType != "DateTime" && @varVariables[i].varType != "Boolean")
                                    {
                                        <h>@varVariables[i].min - @varVariables[i].max</h>
                                    }
                                    else
                                    {
                                        if (@varVariables[i].uniqueValue == true)
                                        {
                                            <h>@varVariables[i].uniqueValueNumber <b style="color: #14bb1aff;">Unique values</b></h>
                                        }
                                        else
                                        {
                                            <h>@varVariables[i].mostFrequent<b style="color: #14bb1aff;">Most frequent</b></h>
                                        }
                                    }
                                }
                                else
                                {
                                    <h class="gray">No data!</h>
                                }

                        </tr>
                    }
                </table>
            }
        </td>
    </tr>
</table>



<link rel="stylesheet" href="https://code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/jquery-1.9.1.js"></script>
<script type="text/javascript">

    $(document).ready(function () {
        //console.log(w);

        function messageNoData(text) {
            document.getElementById('Warning').textContent = 'There is no Data to show ' + text;
        }

        var actual = "actual" //if information of actual dataset
        //Metadata rating
        document
            .getElementById("metadataTotalComplition")
            .appendChild(indicators(@metadataMinRate, @metadataMaxRate, @metadataTotalCompletion, @metadaMedianRate, actual));
        //Dataset description rating
        document
            .getElementById("descriptionRates")
            .appendChild(indicators(@minDescriptionLength, @maxDescriptionLength, @descriptionLength, @medianDescriptionLength, actual));
        //Dataset size rating
        if ('@type' == "tabular") {
            if (@columnNumber >= 0) {
                document
                    .getElementById("datasetColNumns")
                    .appendChild(indicators(@minColNumber, @maxColNumber, @columnNumber, @medianColNumber, actual));
            }
            else { //if colNumber == -1
                document
                    .getElementById("datasetColNumns")
                    .innerHTML = "No data!";
                document
                    .getElementById("datasetColNumns")
                    .style.color = "gray";
            }
            if (@rowNumber>= 0) {
                document
                    .getElementById("datasetRowNumns")
                    .appendChild(indicators(@minRowNumber, @maxRowNumber, @rowNumber, @medianRowNumber, actual));
            }
            else { //if rowNumber == -1
                document
                    .getElementById("datasetRowNumns")
                    .innerHTML = "No data!";
                document
                    .getElementById("datasetRowNumns")
                    .style.color = "gray";
            }
        }
        else { //if type == file
            if (@fileNumber>= 0) {
                document
                    .getElementById("datasetColNumns") //file number
                    .appendChild(indicators(@minFileNumber, @maxFileNumber, @fileNumber, @medianFileNumber, actual));
            }
            else {
                document
                    .getElementById("datasetColNumns") //file format dataset total soize
                    .innerHTML = "No data!";
                document
                    .getElementById("datasetColNumns")
                    .style.color = "gray";
            }
            if (@currentTotalSize >= 0) {
                document
                    .getElementById("datasetRowNumns") //file number
                    .appendChild(indicators(@minSizeFile, @maxSizeFile, @currentTotalSize, @medianSizeFile, actual));
            }
            else {
                document
                    .getElementById("datasetRowNumns") //file format dataset total soize
                    .innerHTML = "No data!";
                document
                    .getElementById("datasetRowNumns")
                    .style.color = "gray";
            }
        }
        //Data structure description rating
        document
            .getElementById("strDescriptionRates")
            .appendChild(indicators(@minDataStrDescriptionLength, @maxDataStrDescriptionLength, @currentDataStrDescriptionLength, @medianDataStrDescriptionLength, actual));
        //Data structure usage
        document
            .getElementById("dataStrUsage")
            .appendChild(indicators(@minDataStrUsage, @maxDataStrUsage, @currentDataStrUsage, @medianDataStrUsage, actual));
        //Performers
        var names = '@p_names'.split("/");
        var rates = '@p_rates'.split("/");
        var ids = '@p_ids'.split("/");
        for (var i = 0; i < names.length - 1; i++) { //the last item is null
            var idsL = ids[i].split(",");
            idsL.pop(); // last item is null
            addPerformer(names[i], rates[i], idsL);
        }


        // Get the modal
        var modal = document.getElementById("myModal");
        // Get the button that opens the modal
        var btn = document.getElementById("openLegend");
        // Get the <span> element that closes the modal
        var span = document.getElementsByClassName("close")[0];
        // When the user clicks the button, open the modal
        btn.onclick = function () {
            modal.style.display = "block";
        }
        // When the user clicks on <span> (x), close the modal
        span.onclick = function () {
            modal.style.display = "none";
        }
        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }

    });


    function OpenIds(performerName, performerDatasets) {
        //Add a Dashboard like view to see the list of datasets.
        var pd = performerDatasets; /*.split(",");*/
        var url = '@Url.Action("showDatasetList", "DQ", new { area = "vim", Name = "performerName", Datasets = "ids" })';
        url = url.replace('Name', performerName);
        url = url.replace('Datasets', pd);
        console.log("url:", url);
        window.open(url, '_blank');
        //document.getElementById('text').textContent = pd[1];
        //window.open("https://www.w3schools.com");
    }

    function addPerformer(name, rate, ids) {
        var table = document.getElementById("left");
        var row = table.insertRow();
        //row.setAttribute("id", "pf");
        var cell1 = row.insertCell(0);
        var cell2 = row.insertCell(1);
        var cell3 = row.insertCell(2);
        cell1.innerHTML = name;
        cell2.innerHTML = ids.length + " times";
        cell2.setAttribute("class", "clickable");
        var func = "OpenIds('" + name + "','," + ids + "')";
        cell2.setAttribute("onClick", func);
        console.log(cell2);
        cell3.appendChild(indicators(@minPerformersActivity, @maxPerformersActivity, rate, @medianPerformersActivity, "actual"));
    }

    function indicators(min, max, current, median, actual){
        const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        var d = 5; //deviation from the x=0
        svg.setAttribute("width", 200);
        svg.setAttribute("height", 35);
        var minIndex = (100 * min) / max;
        svg.appendChild(addRect(d, 7, minIndex, 18, "fill:#ccccccff")); //left rect
        var endRight = 100 - minIndex;
        svg.appendChild(addRect(minIndex + d, 7, endRight, 18, "fill:#999999ff;")); //main rect
        var medianIndex = Math.round((100 * median) / max);
        svg.appendChild(addRect(medianIndex+d, 6, 2, 20, "fill:black;")); //median indicator
        var currentIndex = Math.round((100 * current) / max);
        svg.appendChild(addPolygon(currentIndex+d, 7, actual)); //Triangle
        const tooltip = document.createElementNS("http://www.w3.org/2000/svg", "title");
        tooltip.innerHTML = "Min: " + min + "&#013;Median: " + median + "&#013;Max: " + max + "&#013;Actual value: " + current;
        svg.appendChild(tooltip);
        svg.appendChild(addText(d, 35, "start", "0"));
        if (max > 1000) {
            var m = (Math.round(max / 1000));
            var tx = m + "K";
            svg.appendChild(addText(100 + d, 35, "end", tx));
        }
        else {
            svg.appendChild(addText(100 + d, 35, "end", max));
        }
        return svg;
    }

    function addPolygon(x,y, actual) {
        const polygon = document.createElementNS("http://www.w3.org/2000/svg", "polygon");
        var points = x + "," + y + " " + (x - 5) + "," + (y - 7) + " " + (x + 5) + "," + (y - 7);
        polygon.setAttribute("points", points);
        if (actual == "actual") { polygon.setAttribute("style", "fill: #14bb1aff;"); }
        if (actual == "other") { polygon.setAttribute("style", "fill: #4E94CF;"); }
        return polygon;

    }

    function addRect(x,y,w,h,style) {
        const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
        rect.setAttribute("x", x);
        rect.setAttribute("y", y);
        rect.setAttribute("width", w);
        rect.setAttribute("height", h);
        rect.setAttribute("style", style);
        return rect;
    }
    function addText(x, y, anchor, t) {
        const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
        text.setAttribute("x", x);
        text.setAttribute("y", y);
        text.setAttribute("text-anchor", anchor);
        text.setAttribute("style", "font-size:x-small");
        text.textContent = t;
        return text;
    }

    function dqDetail() {
        var doc = document.getElementById('datasetSelector');
        //doc.value = [0]type, [1]metadataComplition, [2]descriptionLength, [3]structureDescriptionLength,
        // [4]structureUsage, [5]datasetSize, [6]columnNumber, [7]rowNumber, [8]fileNumber, [9]ps;

        var dsInf = doc.value.split(',');
        var actual = "other" //if information of other dataset
        var type = dsInf[0];
        console.log("type: ", type);


        if (doc.value == "all") {
            document.getElementById("DSFileFormat").innerHTML = '';
            document.getElementById("DSmetadataTotalComplition").innerHTML = '';
            document.getElementById("DSdescriptionRates").innerHTML = '';
            document.getElementById("DSStrDescriptionRates").innerHTML = '';
            document.getElementById("DSdataStrUsage").innerHTML = '';
            document.getElementById("DSdatasetColNumns").innerHTML = '';
            document.getElementById("DSdatasetRowNumns").innerHTML = '';
        }
        else {
            document.getElementById("DSFileFormat").innerHTML = type;
            document.getElementById("DSFileFormat").style.color = "#4E94CF";
            document.getElementById("DSmetadataTotalComplition").innerHTML = '';
            document.getElementById("DSdescriptionRates").innerHTML = '';
            document.getElementById("DSStrDescriptionRates").innerHTML = '';
            document.getElementById("DSdataStrUsage").innerHTML = '';
            document.getElementById("DSdatasetColNumns").innerHTML = '';
            document.getElementById("DSdatasetRowNumns").innerHTML = '';

            document
            .getElementById("DSmetadataTotalComplition")
                .appendChild(indicators(@metadataMinRate, @metadataMaxRate, dsInf[1], @metadaMedianRate, actual));

            if (type == "tabular") {
                if (dsInf[6] >= 0) { //column number
                    document
                        .getElementById("DSdatasetColNumns")
                        .appendChild(indicators(@minColNumber, @maxColNumber, dsInf[6], @medianColNumber, actual));
                }
                else {
                    document
                        .getElementById("DSdatasetColNumns")
                        .innerHTML = "No data!";
                    document
                        .getElementById("DSdatasetColNumns")
                        .style.color = "gray";
                }
                if (dsInf[7] >= 0) { //row number
                    document
                        .getElementById("DSdatasetRowNumns")
                        .appendChild(indicators(@minRowNumber, @maxRowNumber, dsInf[7], @medianRowNumber, actual));
                }
                else { //rowNumber == -1
                    document
                        .getElementById("DSdatasetRowNumns")
                        .innerHTML = "No data!";
                    document
                        .getElementById("DSdatasetRowNumns")
                        .style.color = "gray";
                }
            }
            else { //type=file
                if (dsInf[8] >= 0) { //file number
                    document
                        .getElementById("DSdatasetColNumns") //file number
                        .appendChild(indicators(@minFileNumber, @maxFileNumber, dsInf[8], @medianFileNumber, actual));
                }
                else {
                    document
                        .getElementById("DSdatasetColNumns") //file number
                        .innerHTML = "No data!";
                    document
                        .getElementById("DSdatasetColNumns")
                        .style.color = "gray";
                }
                if (dsInf[5] >= 0) { //file dataset size
                    document
                        .getElementById("DSdatasetRowNumns") //file size
                        .appendChild(indicators(@minSizeFile, @maxSizeFile, dsInf[5], @medianSizeFile, actual));
                }
                else {
                    document
                        .getElementById("DSdatasetRowNumns") //file size
                        .innerHTML = "No data!";
                    document
                        .getElementById("DSdatasetRowNumns")
                        .style.color = "gray";
                }

            }

            document
                .getElementById("DSdescriptionRates")
                .appendChild(indicators(@minDescriptionLength, @maxDescriptionLength, dsInf[2], @medianDescriptionLength, actual));

            document
                .getElementById("DSStrDescriptionRates")
                .appendChild(indicators(@minDataStrDescriptionLength, @maxDataStrDescriptionLength, dsInf[3], @medianDataStrDescriptionLength, actual));

            document
                .getElementById("DSdataStrUsage")
                .appendChild(indicators(@minDataStrUsage, @maxDataStrUsage, dsInf[4], @medianDataStrUsage, actual));


        }
    }

</script>


<style>
    div {
        text-align: initial;
    }

    h.red {
        color: red;
    }

    h.green {
        color: #14bb1aff;
    }

    h.gray {
        color: gray;
    }

    h.clickable {
        color: #14bb1aff;
        cursor: pointer;
    }

    .progress-ring {
        stroke: grey;
    }

    /*.progress-ring__circle {
                    stroke-linecap: square;
                }*/


    .dataType {
        font-family: Brush Script MT;
        font-style: oblique;
    }

    /* The Modal (background) */
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    /* Modal Content */
    .modal-content {
        background-color: #fefefe;
        margin: auto;
        left: 33%;
        padding: 10px;
        border: 1px solid #888;
        width: 30%;
    }

    /* The Close Button */
    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

    .info {
        cursor: pointer;
        font-size: large;
    }

    .clickable {
        cursor: pointer;
    }
</style>
