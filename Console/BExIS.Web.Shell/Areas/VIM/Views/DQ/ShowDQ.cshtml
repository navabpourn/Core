@model BExIS.Modules.Vim.UI.Models.DQModels

@using BExIS.Modules.Vim.UI.Controllers;
@using Telerik.Web.Mvc.UI;
@using BExIS.Modules.Vim.UI;


@{
    ViewBag.Title = "Data Quality";
}

@section Information
{
}

@{
    int minDescriptionLength = Model.datasetDescriptionLength.minDescriptionLength;
    int descriptionLength = Model.datasetDescriptionLength.currentDescriptionLength;
    int maxDescriptionLength = Model.datasetDescriptionLength.maxDescriptionLength;
    double medianDescriptionLength = Model.datasetDescriptionLength.medianDescriptionLength;
    int minDataStrDescriptionLength = Model.dataStrDescriptionLength.minDescriptionLength;
    int currentDataStrDescriptionLength = Model.dataStrDescriptionLength.currentDescriptionLength;
    int maxDataStrDescriptionLength = Model.dataStrDescriptionLength.maxDescriptionLength;
    double medianDataStrDescriptionLength = Model.dataStrDescriptionLength.medianDescriptionLength;
    int minDataStrUsage = Model.dataStrUsage.minDataStrUsage;
    int currentDataStrUsage = Model.dataStrUsage.currentDataStrUsage;
    int maxDataStrUsage = Model.dataStrUsage.maxDataStrUsage;
    double medianDataStrUsage = Model.dataStrUsage.medianDataStrUsage;
    int minSizeTabular = Model.datasetTotalSize.minSizeTabular;
    int maxSizeTabular = Model.datasetTotalSize.maxSizeTabular;
    double medianSizeTabular = Model.datasetTotalSize.medianSizeTabular;
    int minSizeFile = Model.datasetTotalSize.minSizeFile;
    int maxSizeFile = Model.datasetTotalSize.maxSizeFile;
    double medianSizeFile = Model.datasetTotalSize.medianSizeFile;
    int currentTotalSize = Model.datasetTotalSize.currentTotalSize;
    var columnNumber = Model.columnNumber;
    var rowNumber = Model.rowNumber;
    string type = Model.type;
    var performers = Model.performers;
    string p_names = "";
    string p_ids = "";
    string p_rates = "";
    for(int i=0; i<performers.Count; ++i)
    {
        p_names += performers[i].performerName + "/";
        p_rates += performers[i].performerRate.ToString() + "/";
        for(int j=0; j< performers[i].DatasetIds.Count; ++j)
        {
            p_ids += performers[i].DatasetIds[j].ToString() + ",";
        }
        p_ids += "/";
    }
    int minPerformersActivity = Model.performersActivity.minActivity;
    int maxPerformersActivity = Model.performersActivity.maxActivity;
    double medianPerformersActivity = Model.performersActivity.medianActivity;
    string performerDatasets = "";
    string performerName = "";
    var varVariables = Model.varVariables;
    int metadataTotalCompletion = Model.metadataComplition.totalFields;
    int metadataRequiredCompletion = Model.metadataComplition.requiredFields;
    int metadataMinRate = Model.metadataComplition.minRate;
    int metadataMaxRate = Model.metadataComplition.maxRate;
    double metadaMedianRate = Model.metadataComplition.medianRate;
    var datasetsInformation = Model.datasetsInformation;

}

@*<p id="text">Metadata complition @metadataTotalCompletion%</p>
    <p>
        <progress max="100" value="@metadataTotalCompletion">hhh</progress>
    </p>*@

<table id="generalInfo">
    <tr>
        <td>
            @* **************************************** *@
            @* ********** General Information ********* *@
            @* **************************************** *@
            <table id="left" class="left">
                <tr>
                    <td></td>
                    <td></td>
                    <td><b>Versus all</b> &nbsp;&nbsp; <b onclick="openLegend()">&#8505;</b></td>
                    <td>
                        <div>
                            @if (datasetsInformation.Count > 0)
                            {
                                <!--Drop Down List to select a dataset-->
                                <select id="datasetSelector" onchange="dqDetail()" style="width:200px;">

                                    <option value="all" label="Select a dataset" selected></option>
                                    @foreach (var dataset in Model.datasetsInformation)
                                    {
                                        string ps = "";
                                        foreach(var p in dataset.performersRate)
                                        {
                                            ps += "," + p.ToString();
                                        }
                                        string ds = @dataset.datasetId.ToString() + "," + @dataset.metadataComplition.ToString() + "," + @dataset.descriptionLength.ToString() +","+ @dataset.structureDescriptionLength.ToString()+","+ @dataset.structureUsage.ToString()+","+ @dataset.datasetSize.ToString() + @ps;

                                <option value="@ds" label="@dataset.datasetId">@dataset.datasetId</option>

                                    }                                
                            </select>
                            }
                        </div>
                    </td>
                </tr>
                <tr>
                    @*** METADATA COMPLITION **********************************@
                    <td>Metadata complition</td>
                    <td>@metadataTotalCompletion% of all metadata fields.</td>
                    <td id="metadataTotalComplition" />
                    <td id="DSmetadataTotalComplition" />                        
                </tr>
                <tr>
                    @*** DATASET SIZE **********************************@
                    <td> Dataset Size</td>
                    <td>
                        @if (@type == "tabular")
                        {<h class="green"> @currentTotalSize </h> <h>cells</h>}
                        @if (@type == "file")
                        {<h class="green">@currentTotalSize</h> <h> KB </h>}
                    </td>
                    <td id="datasetSizeRates" />                       
                    <td id="DSdatasetSizeRates" />                        
                </tr>
                <tr>
                    @*** DATASET DESCRIPTION **********************************@
                    <td>Dataset description</td>
                    <td>
                        @if (@descriptionLength > 0)
                        {<h class="green">&#10004; @descriptionLength</h> <h> characters</h>}
                        else
                        { <h class="red">&#10008; @descriptionLength </h> <h>characters</h>}
                    </td>
                    <td id="descriptionRates" />                        
                    <td id="DSdescriptionRates" />                        
                </tr>
                <tr>
                    @*** DATA STRUCTURE DESCRIPTION **********************************@
                    <td>Data structure description</td>
                    <td>
                        @if (currentDataStrDescriptionLength > 0)
                        {<h class="green">&#10004; @currentDataStrDescriptionLength </h> <h>characters</h>}
                        else
                        {<h class="red">&#10008; No description!</h>}
                    </td>
                    <td id="strDescriptionRates" />                       
                    <td id="DSStrDescriptionRates" />                        
                </tr>
                <tr>
                    @*** DATA STRUCTURE USAGE **********************************@
                    <td>Shared data structure</td>
                    <td>
                        @if (currentDataStrUsage > 1)
                        {<h class="green">&#10004; @currentDataStrUsage </h> <h>times used in other datasets.</h>}
                        else
                        {<h class="red">&#10008; No description!</h>}
                    </td>
                    <td id="dataStrUsage" />                        
                    <td id="DSdataStrUsage" />                        
                </tr>

                @*** PERFORMERS **********************************@
                <tr  id="performerRate">
                    <td><b> Contributor name </b></td>
                    <td><b>Contributes in datasets</b></td>
                    <td><b>Versus all</b></td>
                    
                </tr>                
                @*<tr id="performerRate"></tr>*@

            </table>
        </td>
</tr>
</table>
<table>
    <tr>
        <td>
            @* **************************************** *@
            @* ************* DATA DETAILS ************* *@
            @* **************************************** *@
            @if (@type == "file")
            {
                @*<p>THIS IS A FILE FORMAT DATASET!</p>*@
            }
            @if (@type == "tabular" && varVariables.Count>0 )
            {
                @*<p>THIS IS A TABULAR FORMAT DATASET!</p>
                    <p>Dataset size: @currentTotalSize cells</p>*@                
                <table>
                    <tr>
                        <td><b>Type</b></td>
                        <td><b>Variable name</b></td>
                        <td><b>Description</b></td>
                        <td><b>Variable usage</b></td>
                        <td><b>Data complition</b></td>
                        <td><b>Data distribution</b></td>
                    </tr>
                    @for (int i = 0; i < varVariables.Count; ++i)
                    {
                <tr>
                    <td class="dataType">
                        @if (@varVariables[i].varType == "String")
                        {<p>Abc</p>}
                        else if (@varVariables[i].varType == "DateTime")
                        {<p>01/01</p>}
                        else if (@varVariables[i].varType == "Boolean")
                        {<p>T|F</p>}
                        else
                        {<p>123</p>}
                    </td>
                    <td>@varVariables[i].varLabel</td>
                    <td>
                        @if (@varVariables[i].varDescription.Length > 0)
                        {<h class="green">&#10004; @varVariables[i].varDescription.Length</h>}
                        else 
                        {<h class="red">&#10008; </h>}
                    </td>
                    <td>
                        @if (@varVariables[i].varUsage > 0)
                        {<h class="green">&#10004; @varVariables[i].varUsage</h>}
                        else
                        {<h class="red">&#10008; </h>}
                    </td>
                    @*<td> @varVariables[i].varType</td>*@

                    <td>
                        <svg width="110"
                             height="20">
                            <rect x="0" y="2" width="100" height="10" style=" fill: green; opacity: 0.5;" />
                            <text x="50" y="10" text-anchor="middle" style="font-size:x-small; fill:black;">@varVariables[i].missing%</text>
                            Sorry, your browser does not support inline SVG.
                        </svg>                    
                    </td>
                    <td>
                    @if (rowNumber > 0)
                    {
                        if (@varVariables[i].varType != "String" && @varVariables[i].varType != "DateTime" && @varVariables[i].varType != "Boolean")
                        {
                                <h>@varVariables[i].min - @varVariables[i].max</h>
                        }
                        else
                        {
                            if (@varVariables[i].uniqueValue == true)
                            {
                                <h>@varVariables[i].uniqueValueNumber <b style="color:green;">Unique values</b></h>
                            }
                            else
                            {
                                <h>@varVariables[i].mostFrequent<b style="color:green;">Most frequent</b></h>
                            }
                        }
                    }
                    else
                    {
                            <h>No data</h>
                    }                

                </tr>
                    }
                </table>
            }
        </td>
    </tr>
</table>




<link rel="stylesheet" href="https://code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/jquery-1.9.1.js"></script>
<script type="text/javascript">

    $(document).ready(function () {
        //console.log(w);

        function messageNoData(text) {
            document.getElementById('Warning').textContent = 'There is no Data to show ' + text;
        }


        //Metadata rating
        document
            .getElementById("metadataTotalComplition")
            .appendChild(indicators(@metadataMinRate, @metadataMaxRate, @metadataTotalCompletion, @metadaMedianRate));
        //Dataset description rating
        document
            .getElementById("descriptionRates")
            .appendChild(indicators(@minDescriptionLength, @maxDescriptionLength, @descriptionLength, @medianDescriptionLength));
        //Dataset size rating
        if ('@type' == "tabular") {
            document
                .getElementById("datasetSizeRates")
                .appendChild(indicators(@minSizeTabular, @maxSizeTabular, @currentTotalSize, @medianSizeTabular));
        }
        //Data structure description rating
        document
            .getElementById("strDescriptionRates")
            .appendChild(indicators(@minDataStrDescriptionLength, @maxDataStrDescriptionLength, @currentDataStrDescriptionLength, @medianDataStrDescriptionLength));
        //Data structure usage
        document
            .getElementById("dataStrUsage")
            .appendChild(indicators(@minDataStrUsage, @maxDataStrUsage, @currentDataStrUsage, @medianDataStrUsage));
        //Performers
        var names = '@p_names'.split("/");
        var rates = '@p_rates'.split("/");
        var ids = '@p_ids'.split("/");
        for (var i = 0; i < names.length-1; i++) {
            addPerformer(names[i], rates[i], ids[i]);
        }


    });


    function addPerformer(name, rate, ids) {
        var table = document.getElementById("left");
        var row = table.insertRow();
        //row.setAttribute("id", "pf");
        var cell1 = row.insertCell(0);
        var cell2 = row.insertCell(1);
        var cell3 = row.insertCell(2);
        cell1.innerHTML = name;
        cell2.innerHTML = ids.length + " times";
        cell3.appendChild(indicators(@minPerformersActivity, @maxPerformersActivity, rate, @medianPerformersActivity));
    }

    function indicators(min, max, current, median){
        const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        var d = 5; //deviation from the x=0
        svg.setAttribute("width", 200);
        svg.setAttribute("height", 30);
        var minIndex = (100 * min) / max;
        console.log("min, max: ", min, ", ", max);
        console.log("minIdex: ", minIndex);
        svg.appendChild(addRect(d, 7, minIndex, 16, "fill:gray;opacity:0.4;")); //left rect
        console.log("leftRect: ", d, minIndex)
        var endRight = 100 - minIndex;
        console.log("endRight: ", endRight);        
        svg.appendChild(addRect(minIndex + d, 7, endRight, 16, "fill:gray;opacity:0.7;")); //main rect
        console.log("rightRect: ", minIndex + d, endRight);
        var medianIndex = Math.round((100 * median) / max);
        svg.appendChild(addRect(medianIndex+d, 6, 2, 18, "fill:black;")); //median indicator
        var currentIndex = Math.round((100 * current) / max);
        //svg.appendChild(addRect(currentIndex, 6, 2, 18, "fill:green;")); //median indicator
        svg.appendChild(addPolygon(currentIndex+d, 7));
        const tooltip = document.createElementNS("http://www.w3.org/2000/svg", "title");
        tooltip.innerHTML = "Min: " + min + "&#013;Median: " + median + "&#013;Max: " + max;
        svg.appendChild(tooltip);
        svg.appendChild(addText(d, 30, "start", "0"));
        svg.appendChild(addText(100 + d, 30, "end", max));
        console.log("minText, maxText: ", d, 100 + d);
        console.log("-------");
        return svg;
    }

    function addPolygon(x,y) {
        const polygon = document.createElementNS("http://www.w3.org/2000/svg", "polygon");
        var points = x + "," + y + " " + (x - 4) + "," + (y - 5) + " " + (x + 4) + "," + (y - 5); 
        polygon.setAttribute("points", points);
        polygon.setAttribute("style", "fill: green; stroke: green; stroke - width: 1");
        return polygon;

    }

    function addSvg(w, h) {
        const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
        svg.setAttribute("width", w);
        svg.setAttribute("height", h);
        svg.appendChild(addRect(0, 1, 100, 20, "fill:gray;opacity:0.5"));
        return svg;
    }
    function addRect(x,y,w,h,style) {
        const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
        rect.setAttribute("x", x);
        rect.setAttribute("y", y);
        rect.setAttribute("width", w);
        rect.setAttribute("height", h);
        rect.setAttribute("style", style);
        return rect;
    }
    function addText(x, y, anchor, t) {
        const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
        text.setAttribute("x", x);
        text.setAttribute("y", y);
        text.setAttribute("text-anchor", anchor);
        text.setAttribute("style", "font-size:x-small");
        text.textContent = t;
        return text;
    }


    function dqDetail() {
        var doc = document.getElementById('datasetSelector');
        //doc.value = [0]datasetId, [1]metadataComplition, [2]descriptionLength, [3]structureDescriptionLength,
        // [4]structureUsage, [5]datasetSize, [6]ps;
        var dsInf = doc.value.split(',');
        console.log(dsInf);


        if (doc.value == "all") {
            document.getElementById("DSmetadataTotalComplition").innerHTML = '';
            document.getElementById("DSdatasetSizeRates").innerHTML = '';
            document.getElementById("DSdescriptionRates").innerHTML = '';
            document.getElementById("DSStrDescriptionRates").innerHTML = '';
            document.getElementById("DSdataStrUsage").innerHTML = '';

        }
        else {
            document.getElementById("DSmetadataTotalComplition").innerHTML = '';
            document.getElementById("DSdatasetSizeRates").innerHTML = '';
            document.getElementById("DSdescriptionRates").innerHTML = '';
            document.getElementById("DSStrDescriptionRates").innerHTML = '';
            document.getElementById("DSdataStrUsage").innerHTML = '';

            document
            .getElementById("DSmetadataTotalComplition")
                .appendChild(indicators(@metadataMinRate, @metadataMaxRate, dsInf[1], @metadaMedianRate));

            if ('@type' == "tabular") {
                document
                    .getElementById("DSdatasetSizeRates")
                    .appendChild(indicators(@minSizeTabular, @maxSizeTabular, dsInf[5], @medianSizeTabular));
            }

            document
                .getElementById("DSdescriptionRates")
                .appendChild(indicators(@minDescriptionLength, @maxDescriptionLength, dsInf[2], @medianDescriptionLength));

            document
                .getElementById("DSStrDescriptionRates")
                .appendChild(indicators(@minDataStrDescriptionLength, @maxDataStrDescriptionLength, dsInf[3], @medianDataStrDescriptionLength));

            document
                .getElementById("DSdataStrUsage")
                .appendChild(indicators(@minDataStrUsage, @maxDataStrUsage, dsInf[4], @medianDataStrUsage));

           
        }
    }



    function OpenFilterSearchPerformer(performerDatasets, performerName) {
        //Add a Dashboard like view to see the list of datasets.
        document.getElementById('text').textContent = performerDatasets;
        @*var pd = performerDatasets.split(",");
        var url = '@Url.Action("Index", "Home", new { area = "ddm", SelectedItem = "performerName", parent = "Person" })';
        url = url.replace('performerName', performerName);
        window.open(url, '_blank');*@
        <!--//document.getElementById('text').textContent = pd[1];
        //window.open("https://www.w3schools.com");
    }

</script>


<style>
    div {
        text-align: initial;
    }

    h.red {
        color: red;
    }

    h.green {
        color: green;
    }

    h.clickable {
        color: green;
        cursor: pointer;
    }

    .progress-ring {
        stroke: grey;
    }

    /*.progress-ring__circle {
                    stroke-linecap: square;
                }*/

    .metaRate_left,
    .metaRate_right {
        fill: gray;
        opacity: 0.5;
    }

    .metaRate_center {
        fill: gray;
        opacity: 0.8;
    }

    /* Tooltip container */
    .tooltip {
        position: relative;
        display: inline-block;
        border-bottom: 1px dotted black;
    }

    .tooltip .tooltiptext {
        visibility: hidden;
            width: 120px;
            background-color: black;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px 0;
            /* Position the tooltip */
            position: absolute;
            z-index: 1;
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
        }

    .dataType {
        font-family: Brush Script MT;
        font-style: oblique;
    }
</style>
